var cols  = 3;
var rows  = 5;


//Getting html element
let html = document.getElementById('html')
//Setting a pixel width to a value of the page height - 1%
var pix = html.clientHeight/rows - (html.clientHeight/rows)/100;

var w = pix*cols;
var h = pix*rows;

var pic = [];

var txt = "";
var chance = "";

//Setup actions
function setup() {
 createCanvas(w+w/(2/1.5+1),h);

 //Initializing pic array
 for(let i = 0; i<cols*rows; i++){
   pic[i]=0;
 }

}

//Looped actions
function draw(){
  background(255);

  //Grid
  drawGrid(0,0);

  //Drawing button
  drawButton();

  //Drawing number
  for(let i = 0;i<pic.length;i++){
    fill(75);
    if(pic[i]==1){
      rect((i%cols)*pix,Math.floor(i/cols)*pix, pix, pix);
    }
  }

    //Text drawing
    fill(75);
    textSize(pix);
    text(txt,cols*pix*1.13,pix*1.3);

    fill(200,25,25);
    textSize(pix/6);
    text(chance,cols*pix*1.06,pix*1.5);

}

//Click handling
function mousePressed(){
  if(Math.floor(mouseX/pix)<cols){
    if(Math.floor(mouseY/pix)<rows){
      drawRect(mouseX,mouseY);
    }
  }

 //Handling button press
  if(mouseX>=cols*pix+10&&mouseX<=cols*pix+10+pix*1.1){
    if(mouseY>=rows*pix-pix+10&&mouseY<=rows*pix-pix+10+pix-20){
      subm();
    }
  }

  if(mouseX>=cols*pix+10&&mouseX<=cols*pix+10+pix*1.1){
    if(mouseY>=rows*pix-pix-pix/2&&mouseY<=rows*pix-pix-pix/2+pix/2){
      for(let i = 0;i<pic.length;i++ ){
        pic[i] = 0;
      }
     }
  }

}

//Pixel drawing function
function drawRect(_x,_y){
  let x = Math.floor(_x/pix);
  let y = Math.floor(_y/pix);
    pic[y*cols+x] = 1;
}

//Grid drawing function
function drawGrid(x_off,y_off){
  let count = 1;
  noStroke();
  for(let i = 0;i<cols;i++){
    for(let j = 0;j<rows;j++){
      if(count%2===0){
        fill(245);
      }else{
        fill(225);
      }
      rect(i*pix+x_off,j*pix+y_off,pix,pix);
      count++;
    }
  }
}

//Drawing button
function drawButton() {
  fill(150,20,20);
  stroke(0);
  strokeWeight(pix/25);
  rect(cols*pix+10,rows*pix-pix-pix/2,w/10+pix-20,pix/2);//DUCT-TAPE POSITIONING
  textSize(pix/4);
  fill(0);
  strokeWeight(0.6);
  text('Clear',cols*pix+pix/3,rows*pix-pix*1.1-pix/15);//DUCT-TAPE POSITIONING
  noStroke();

  fill(200);
  stroke(0);
  strokeWeight(pix/25);
  rect(cols*pix+10,rows*pix-pix+10,w/10+pix-20,pix-20);//DUCT-TAPE POSITIONING
  textSize(pix/4);
  fill(0);
  strokeWeight(0.6);
  text('Submit',cols*pix+pix/4,rows*pix-pix/(2/1.5+1));//DUCT-TAPE POSITIONING
  noStroke();
}

//Train
function subm(){
     //NeuralNetwork initialization and training
  var neunet = new NeuralNetwork(cols*rows,10, 10);

  //Weights of connections between Inputs and Hidden nodes
  neunet.wih.matrix = [[0.7389466892109685, -2.0948137842173713, 0.7923871943148201, -17.812394860543257, -3.9480413732135387, 4.073891187462615, 4.304427945318489, -7.356349263821301, 3.6944110062740205, 4.040350888851776, -4.245928909160795, 0.03741542874321373, -0.15573366994880802, 7.175490424932744, 0.20963873071269154],
[-0.19587383078494552, -7.078578669256136, -0.9477427171013495, -2.758164300236764, 1.6385628707522548, -0.29608916960830756, -1.8524769897688422, 2.483512268274224, 3.20566203918156, 15.924342883288176, 4.823114983926254, -2.8776351077804536, 0.805971262491942, 1.4537191421832678, -0.4086216498445998],
[-1.7699169534188481, -7.914971907212573, 0.881022035928571, 2.164803421604056, 2.623880118552697, -7.507943660033181, -2.8851202171289754, -8.713194161302596, -0.2720943515934203, 8.362975546207087, 18.09412815085893, 11.607424633639885, -0.4417663566883446, -1.664131728207908, 2.459840228831034],
[-2.697736882139331, -10.522268269938685, 0.20549521482184901, 1.6686946761394519, -0.8720641746187128, -3.5885143521599208, 3.154555970787939, 1.576459400489426, -4.516596938538635, 0.7236039697292052, 6.101955134068157, 11.422030037825829, 0.8377267017849932, 5.508278726568988, 2.2632631011266673],
[0.3965967227982886, -5.302437884515544, -0.42693372938747476, -2.3082299873202965, -1.112005910804755, 8.441932180220542, 0.7203369351154849, -3.0357107386549878, -0.6267849886898837, 7.955004592122805, 8.895478358131495, 17.0546482496014, -0.5708589651847226, -8.776421191385397, -1.5196266905096005],
[-0.9922418203034135, -6.5655478405952845, -0.8534093251873379, 2.4611605114093584, 11.803154147276597, 15.5535100904082, 1.9511241254355154, 6.949835424338151, -1.7047004813539661, 1.5927617147490638, -2.683062109793797, -8.570872698073014, 0.11989989517204479, -4.542471920475305, 0.5284124728337832],
[-0.24947584704755602, 9.141436651566117, -0.16221312584652683, -9.908099018525636, -3.2470608611909713, -7.177281401155469, -5.510006481124076, 4.775647341828024, 6.701349344249987, -5.848499552933971, -1.4785469308042343, 4.55576931269368, 3.616312072894432, 4.732261305361732, 0.15493528203465023],
[11.132196271388771, -7.126716842681044, 2.9340738691120536, -3.067397898034766, -4.21301073826769, 4.866385433961476, -7.649171649408679, -4.587784387350679, 0.21540922086376726, -1.9711514709863298, 2.262297830607833, -1.6932726176593262, -1.2105470693049756, -5.259319433252522, -1.1655930631733107],
[0.2680942549304269, 3.764445922173291, -2.671540718916352, 3.0299135676733675, -5.870032903463732, -3.1753238288610754, 0.26257080236425073, 2.5849846419281075, -0.14485889705734736, 1.0134930676146128, -2.1329358979488258, 1.0695754488215148, 0.469295871934887, -9.210991703738898, -0.29810689091320985],
[3.843220791043483, 4.713418953971729, -0.8781553587853814, 5.746242065339546, 2.0565484702263834, -2.7268178885068592, 2.5136317620992656, 4.052077378054105, -0.19430441989838518, 2.6718110343346275, 3.395666005815711, -1.5120258742870658, 1.3823150854978472, 1.2122093109629344, -0.5943530177647898]];

  //Weights of connections between Hidden and Output nodes
  neunet.who.matrix = [[5.100935856064242, 3.0051284156560834, 2.293947808323987, 0.26330229647520376, 1.857697227603814, -3.5402752224107648, -7.884890092800943, -10.172880129491135, -5.775224668201159, -1.1589765104991396],
[0.1543726405153227, -0.599373267161505, 7.567612573349269, 0.7803080755062518, -7.4992666962888475, 4.037416386572305, -0.1193435810837118, -1.0112486441022333, 6.990329869744909, -7.880853217588621],
[3.3118113510020213, 2.671040648527471, -2.9147535191347473, -4.8012062057622495, -3.9583922043545625, 0.6489573964483134, 0.674042885344899, -3.6349437371801088, -0.15368083381405237, -2.356408336306],
[7.813097881204455, -5.896052493137811, -5.693666365114004, 0.08053161058694468, 2.4961480300448735, -2.082488112481953, -1.127751587728412, -3.8460568024978428, -0.7691314221632798, -3.3990538325330264],
[-3.324578072107802, -4.714576952734695, -3.854230836325352, 3.3014165762086054, 0.3291844162129413, 1.0560630555989345, -8.90992011482061, 7.049176844431832, -0.28999080674646704, -0.9067318998907662],
[-1.0060623486137914, -3.7847437862941122, -1.4199258533045043, 1.3576455729472958, -4.9565252324184375, -5.464815838641732, 2.2241947095011723, -0.804378148780919, -0.6257358742309713, 1.5069752543894217],
[-7.9919962476770925, 4.162795641362431, 2.743332966803217, -0.9654965683354839, 2.568345769233775, -6.144093109283665, 0.6084929808949706, 0.059068177595605606, -1.533157187495908, -4.278060827601577],
[-2.0875347947842378, -0.08923079593786137, -1.8783534860077706, -6.538945923570069, 0.28520195981364577, -3.1568908306749552, 1.8287296373543565, 7.0217383064741, 0.3142631962162225, -1.1603396675735402],
[-6.95056219421222, 8.09614418577776, -8.53982772385657, 2.2455558264320543, -0.4575275119024384, 0.8481184028500338, -0.5735472870273407, -1.5981397502760586, -1.750506963642398, -5.779279286781556],
[-7.480992227065557, -7.143091520803553, -0.4747544241421148, -3.5225863115415526, 3.6677099203170433, 3.8443507924656166, 3.8241138383933286, -6.154315607975166, -2.8118507345536337, -4.095468420569181]];


  let outs = neunet.query(pic); //Feedforwarding the answer

  //Finding max from outputs
  //And getting its index
  //index equals the number we are finding
  let max_num = outs[0];
  let number = null;
  for(let i = 0;i<outs.length;i++){
    if(outs[i]>=max_num){
      max_num = outs[i];
      number = outs.indexOf(max_num);
    }
  }
  txt = number;
  chance = "Chance: "+Math.floor(max_num*100)+"%";
}
