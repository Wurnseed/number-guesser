

//ADJUSTABLE VALUES
var lr = 0.1;
var training_count = 500000;
var lr_target = 0.0001;
//ADJUSTABLE VALUES

var cols  = 3;
var rows  = 5;

//Getting html element
let html = document.getElementById('html')
//Setting a pixel width to a value of the page height - 1%
var pix = html.clientHeight/rows - (html.clientHeight/rows)/100;

var w = pix*cols;
var h = pix*rows;

//Decreasing LR
var lr_step  = lr_target/training_count;

var pic = [];

var txt = "";
var chance = "";

//Setup actions
function setup() {
 createCanvas(w+w/(2/1.5+1),h);

 //Initializing pic array
 for(let i = 0; i<cols*rows; i++){
   pic[i]=0;
 }

}

//Looped actions
function draw(){
  background(50,50,50);

  //Grid
  drawGrid(0,0);

  //Drawing button
  drawButton();

  //Drawing number
  for(let i = 0;i<pic.length;i++){
    fill(75);
    if(pic[i]==1){
      rect((i%cols)*pix,Math.floor(i/cols)*pix, pix, pix);
    }
  }

    //Text drawing
    fill(75);
    textSize(pix);
    text(txt,cols*pix*1.13,pix*1.3);

    fill(200,25,25);
    textSize(pix/6);
    text(chance,cols*pix*1.06,pix*1.5);


}

//Click handling
function mousePressed(){
  if(Math.floor(mouseX/pix)<cols){
    if(Math.floor(mouseY/pix)<rows){
      drawRect(mouseX,mouseY);
    }
  }

 //Handling button press
  if(mouseX>=cols*pix+10&&mouseX<=cols*pix+10+pix*1.1){
    if(mouseY>=rows*pix-pix+10&&mouseY<=rows*pix-pix+10+pix-20){
      subm();
          console.log(1);
    }
  }

  if(mouseX>=cols*pix+10&&mouseX<=cols*pix+10+pix*1.1){
    if(mouseY>=rows*pix-pix-pix/2&&mouseY<=rows*pix-pix-pix/2+pix/2){
      for(let i = 0;i<pic.length;i++ ){
        pic[i] = 0;
      }
      console.log(2);
     }
  }

}

//Pixel drawing function
function drawRect(_x,_y){
  let x = Math.floor(_x/pix);
  let y = Math.floor(_y/pix);

  if(pic[y*cols+x]==0){
    pic[y*cols+x] = 1;
  }else{
    pic[y*cols+x] = 0;
  }
}

//Grid drawing function
function drawGrid(x_off,y_off){
  let count = 1;
  noStroke();
  for(let i = 0;i<cols;i++){
    for(let j = 0;j<rows;j++){
      if(count%2===0){
        fill(245);
      }else{
        fill(225);
      }
      rect(i*pix+x_off,j*pix+y_off,pix,pix);
      count++;
    }
  }
}

//Drawing button
function drawButton() {
  fill(150,20,20);
  stroke(0);
  strokeWeight(pix/25);
  rect(cols*pix+10,rows*pix-pix-pix/2,w/10+pix-20,pix/2);//DUCT-TAPE POSITIONING
  textSize(pix/4);
  fill(0);
  strokeWeight(0.6);
  text('Clear',cols*pix+pix/3,rows*pix-pix*1.1-pix/15);//DUCT-TAPE POSITIONING
  noStroke();

  fill(200);
  stroke(0);
  strokeWeight(pix/25);
  rect(cols*pix+10,rows*pix-pix+10,w/10+pix-20,pix-20);//DUCT-TAPE POSITIONING
  textSize(pix/4);
  fill(0);
  strokeWeight(0.6);
  text('Submit',cols*pix+pix/4,rows*pix-pix/(2/1.5+1));//DUCT-TAPE POSITIONING
  noStroke();
}

//Train
function subm(){
     //NeuralNetwork initialization and training
  console.log(pic);
  var neunet = new NeuralNetwork(cols*rows,10, 10,lr);

  neunet.wih.matrix = [[9.568106784702493, 4.077275230810691, 0.47290925509622717, 5.139610133456549, -5.95670838641784, -2.606830232980662, 3.3446802665862845, 2.1489024031418973, 0.25398097645075907, 5.08190305728187, -8.534244673725464, -2.261179622710901, -5.563741853541532, 1.9430433383927284, 0.2229729001625515],
  [-0.5547820739242523, 3.058152595556402, -0.11659897425521241, -0.03509991230451283, -1.6935014278997067, -11.542769433406049, 0.3637660586750073, 0.06596252182287934, -0.045374709940289415, 9.82702290045021, -0.5710734229330287, -3.0510329856492078, -2.066161892990927, 8.264994123904993, 0.1901884120778024],
  [0.0063767991683805515, 3.7548665623136537, -0.07259940347112712, 12.838212121853987, -0.04071318372212879, 3.4694141696695007, 0.03845325292915291, -1.022321705556381, -0.028658023830807806, -2.100782106654384, 6.164113284493938, -4.6651903633392555, -0.07683539671472628, -8.339688613676246, -0.03755263611632267],
  [1.7052024444784117, 2.577801911571677, 1.7328968647427572, 2.10368378757987, 1.6070861192051658, 1.3727975075250627, 2.6193361285566557, 1.7719185057839792, 2.754704767479276, 2.2377733264403274, -0.6028070743908075, 2.4644785718831423, 0.9181044225241453, 1.1265890945133767, 0.7289915770867538],
  [0.055938834331451165, 0.05570309149729369, 0.19937117325667986, 1.675582253474699, 6.246606936541781, -8.960033984479887, -0.23749406079050833, -9.783336762201815, -0.3068314092610872, 8.374450365833834, 0.9709514734854632, 1.8581160722274792, -0.3291525724804533, 1.3427767646442275, 0.2073971162156245],
  [0.5271612565248022, -4.002969565884267, 0.03758315060404773, 0.9725340799986338, 7.2499249782955735, 10.465109113826692, 0.17949319026294486, -4.908799460867015, -0.09321294462850731, 2.536601791769477, 8.078450326029225, 5.8640746665900245, 0.017243983827447927, -5.444853037545489, -0.3644438362358255],
  [-1.5690041300789395, 7.017758633060155, 0.4900481995964139, -1.298210324990507, -8.4769380867272, -9.836993504271376, 6.441342845061674, -0.8216509038199099, -6.123520847442114, -8.766639135245356, -12.23846233417587, 8.200698682073236, -0.3501262533067931, 10.67981624769996, -0.26306575479018424],
  [-0.22672715254004067, 16.21037949044225, 0.14482730414281744, -2.687031509189573, -0.5875441639493266, 1.9160855505708732, 0.13452530429945203, -6.3974764632462575, -0.19126150079633913, -9.636360098915773, -6.97516151627181, -1.365942936031863, 0.2033591031950373, -2.2545549987686893, -0.04994662939200417],
  [-1.16179154969587, -12.360580332981923, -0.18491256061240968, 4.754955266952485, 4.500674593894801, -3.2668224094483187, 3.2268231611836287, 7.033718036120062, -0.8195312899122592, -3.2602771082629878, 0.6619357245455059, 7.4190958696133, 0.9533201226394614, 5.053305347497375, 0.508336041862524],
  [0.4158585960427824, 4.119181727350956, 2.2799639575024284, -0.756761986461568, 0.04432496391143781, 2.5791390670181897, -1.3755161045305246, 2.5031924832887635, 1.4087378160476587, -2.496907598273652, 1.1476312408814933, 2.6806233361685123, -0.6694396680090599, 0.25354989373576703, 1.3087914729138819]];

    //Weights of connections between Inputs and Hidden nodes
    neunet.who.matrix = [[-5.625788467915737, 2.449664425071027, -0.1329073455473338, -5.731612511249713, 7.552239904485, 3.1429241220336364, 5.845645865232073, 6.493673623485243, -5.336620665126517, -3.0093921369364436],
  [-7.8879680588797205, 3.526410077298774, -1.441460632262617, 3.444122441944295, 0.2972415558330771, 3.8198123826460004, -5.35580049312269, -1.4917932925761908, 1.9974315557559783, -4.308315738993976],
  [0.8671276867294482, 2.4411544966443035, -5.266083250163099, 0.5624511175903106, -0.801558405814791, -3.1804903115763774, -1.9977135896000273, -0.08550573068530865, -4.1869488046857395, 1.4213508253471565],
  [2.5359299934456287, -3.8543840655998234, -8.408549594093124, -2.178076216648915, -1.3068651623587557, 0.013615359549147624, 3.428895562131756, 1.0463384864440313, 1.1757572491609711, -1.8848031131271374],
  [3.085578241261736, -6.744246403564639, 1.92251356164261, -2.663545273997957, -0.04142060023031756, -0.9621703335639872, -3.341782730003805, -6.3200221846567715, 1.6632562305829661, 1.0469252360857666],
  [-1.4878274361084596, 1.1251755187914942, 2.6935153934508063, -1.4255468993242626, -5.373145561369939, -8.297699369936835, 1.4773320747309775, 2.9404395758857533, 1.5541060360403893, -2.363714080029469],
  [-0.4273141681797365, 0.873679543141509, -2.183204785413412, -2.5009306280267665, 3.3064347897572453, -5.859137215387234, 2.558536829604981, -5.996668925954522, 1.704190032424678, 0.36017443374844077],
  [-0.31550400566531484, -3.4436088359905597, 3.194667324307426, -1.3007072376654492, -0.8218141400177357, 1.4432035488126689, -3.9818091340730257, 3.8522502353951418, -6.358324408175001, -1.5979052915205079],
  [-1.1581754104650817, 3.845767196555536, 0.3449022021885304, -3.9550339911895787, -6.4144090916791745, 3.1941367749651346, 4.736004778720723, -6.139539619695929, -0.6286363322645381, -2.0860480852400727],
  [-3.4545652455467826, -8.703263623163606, 7.678730086346904, -5.131988664368, -3.101917380024182, -1.2066490589250305, 4.636049405873002, 3.1286406985463207, 2.6272467025236095, -4.608264246142816]];


  let outs = neunet.query(pic); //Feedforwarding the answer

  //Finding max from outputs
  //And getting its index
  //index equals the number we are finding
  let max_num = outs[0];
  let number = null;
  for(let i = 0;i<outs.length;i++){
    if(outs[i]>=max_num){
      max_num = outs[i];
      number = outs.indexOf(max_num);
    }
  }
  txt = number;
  chance = "Chance: "+Math.floor(max_num*100)+"%";
  console.log(neunet.wih.matrix);
  console.log(neunet.who.matrix);
}
